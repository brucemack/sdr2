/**
 * Pico I2S Demonstration
 * Copyright (C) 2025, Bruce MacKinnon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * NOT FOR COMMERCIAL USE WITHOUT PERMISSION.
 */

; ================================================================
; Program for generating system clock

.program i2s_sck
.wrap_target
    set pins 1
    set pins 0
.wrap

; ================================================================
; Program for receiving I2S audio data from a slave ADC.
; Input pins: DIN
; Side set pins: LRCK, BCK
;
; NOTES: 
; * Be sure to run this at a fraction of the SCK state machine!
;   So the BCK/LRCK have the right relationship with the desired
;   Fs frequency.
; * Make sure that auto-push is enabled (32)
; * Make sure that the clocks start in the high position,
;   as if we are just finishing a right channel transfer.
;
; NOTE ABOUT READ TIMING:
;
; Per the PCM1804 datasheet (page 22), the data will become 
; available after the FALLING EDGE of the BCK. So we should 
; always lower the BCK in one instruction and read the DIN
; pin in a following instruction (as well as raising the BCK).
;
; NOTE ABOUT PCM1804 BCK
;
; Per the datasheet, the expectation is that BCK is running
; at 64xFs (i.e. two 32-bit frames) even though the ADC
; only has 24 bits of resolution.

; NOTE ABOUT I2S FRAMING:
;
; It's a bit strange, but per the I2S specification, the MSB of 
; a frame is available during the second rising BCK *AFTER* the 
; transition of the LRCK.

; From datasheet (page 886):
;
; "JMP X-- and JMP Y-- always decrement scratch register X or Y, 
; respectively. The decrement is not conditional on the current (i.e. final) 
; value of the scratch register. The branch is conditioned on the 
; initial value of the register, i.e. before the decrement took 
; place: if the register is initially nonzero, the branch is taken."

.program i2s_din_master
.side_set 2 

; We do this to (almost) fill up the ISR so that the next IN 
; will trigger an autopush and get things flowing normally.

                    ;      LRCK
                    ;      |BCK
                    ;      ||
    in pins 31      side 0b11
.wrap_target
    set x 30        side 0b00
dataL:
    in pins 1       side 0b01   ; Autopush should happen on the first loop
    jmp x-- dataL   side 0b00
    in pins 1       side 0b01   
    set x 30        side 0b10
dataR:
    in pins 1       side 0b11   ; Autopush should happen on the first loop
    jmp x-- dataR   side 0b10
    in pins 1       side 0b11
.wrap 

; ================================================================
; Program for sending I2S audio to a slave DAC.
; Is is expected that this will run in parallel (perlectly 
; synchronized) with the i2s_din_master program. Therefore,
; we don't have any clock lines to worry about.
;
; NOTE: The first word written to the left channel will
; be garbage.
;
; NOTES: 
; * Make sure that auto-pull is enabled (32).
; * Make sure that SHIFTCTRL_OUT_SHIFTDIR is set to "left."
; * Bits will be taken from the MSB end of OSR.
;       
.program i2s_dout_master
.side_set 2 

; We do this first out to (almost) empty the OSR so that 
; the next OUT will trigger an autopull and get things 
; flowing normally.
public entry_point:
                    ;      LRCK
                    ;      |BCK
                    ;      ||
    out pins 31     side 0b11
.wrap_target
    out pins 1      side 0b00
    set x 30        side 0b01
dataL: 
    out pins 1      side 0b00
    jmp x-- dataL   side 0b01
    out pins 1      side 0b10
    set x 30        side 0b11
dataR:
    out pins 1      side 0b10
    jmp x-- dataR   side 0b11
.wrap

; ================================================================
; Program for receiving I2S audio data from master CODEC.
; Input pins are sequential in this order: DIN, BCLK, LRCLK.
; Output pin is: DEBUG

.program i2s_din

; Wait for the falling transition of the LRCK.  This 
; ensures that we always start at the beginning of a
; left-side word.
;
; LRCK has been mapped as input pin 2.
    wait 1 pin 2
    wait 0 pin 2

; NOTICE: The initial right-side word placed on the RX FIFO will 
; be garbage.

; Here we deal with the first bit of the L window, which 
; is really just the end of the right-side word`.

start_sample_l:
; DEBUG
    set pins, 1
    set pins, 0
; Wait for the rising transition of the BCK
; Parameter 0: "1" means wait for a 1.
; Parameter 1: "pin" means waiting on a mapped pin.
; Parameter 2: "1" means pin 1 (i.e. the second pin)
; BCK has been mapped as input pin 1.
    wait 1 pin 1
; Pull a bit from the DIN pin and into the ISR.  This will 
; be the LSB of the previous right-side word.
; Parameter 1: "1" means 1 bit is read
; DIN has been mapped as input pin 0.
    in pins, 1
; Put the received data in the ISR onto the RX FIFO. 
; The ISR is cleared automatically.
    push noblock
; Wait for the falling transition of the BCK
    wait 0 pin 1

sample_l:
; Wait for the rising transition of the BCK
    wait 1 pin 1
; Pull a bit from the DIN pin
    in pins, 1
; Wait for the falling transition of the BCK
    wait 0 pin 1
; If the LRCK goes high then we're (almost) finished 
; with the left word so move to the right collection.
;
; The jump condition tests to see if the pin is high.
; NOTE: This depends on the LRCK pin having been mapped
; as the jump pin!
    jmp pin start_sample_r
; Otherwise keep looping through the left-side word collection.
    jmp sample_l 

; Here we deal with the first bit of the R window, which 
; is really just the end of the left-side word`.

start_sample_r:
; DEBUG
    set pins, 1
    set pins, 0
; Wait for the rising transition of the BCLK
    wait 1 pin 1
; Pull a bit from the DIN pin.  This will be the LSB of 
; the previous left-side word.
    in pins, 1 
; Put the received data onto the FIFO
    push noblock
; Wait for the falling transition of the BCK
    wait 0 pin 1

sample_r:
; Wait for the rising transition of the BCK
    wait 1 pin 1 
; Pull a bit from the DIN pin and shift into the ISR
    in pins, 1
; Wait for the falling transition of the BCK
    wait 0 pin 1
; If LRCK is still high we're still sampling the right 
; word.
;
; The jump condition tests to see if the pin is 1.
; NOTE: This depends on the LRCK pin having been mapped
; as the jump pin!
    jmp pin sample_r    
; If the LRCK pin was low then we are (almost) finished
; collecting the right-side word.    
    jmp start_sample_l
